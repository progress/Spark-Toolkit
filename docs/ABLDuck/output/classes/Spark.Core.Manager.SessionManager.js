Ext.data.JsonP.Spark_Core_Manager_SessionManager({"files":[],"uses":["Progress.Lang.*","Progress.Json.ObjectModel.*","OpenEdge.DataAdmin.*","OpenEdge.DataAdmin.Error.*","OpenEdge.DataAdmin.Lang.Collections.*","Spark.Core.Util.GenTools","Spark.Core.Util.OSTools","Spark.Core.Manager.IClientContext","Spark.Core.Manager.ILoggingManager","Spark.Core.Manager.IServiceManager","Spark.Core.Manager.SessionAttributeEnum"],"id":"class-Spark.Core.Manager.SessionManager","tagname":"class","name":"Spark.Core.Manager.SessionManager","extends":"Spark.Core.Manager.Manager","author":"rosmith","comment":"\u003ch3\u003eFile:\u003c/h3\u003e\n\u003cp\u003eSessionManager\u003c/p\u003e\n\u003ch3\u003ePurpose:\u003c/h3\u003e\n\u003cp\u003ePrimary manager for framework startup\u003c/p\u003e\n\u003ch3\u003eDescription:\u003c/h3\u003e\n\u003cp\u003eSession Startup Manager\u003c/p\u003e\n\u003ch3\u003eCreated:\u003c/h3\u003e\n\u003cp\u003eNov 02 2016\u003c/p\u003e\n","icon":"class","superclasses":["Spark.Core.Service.Service","Spark.Core.Manager.Manager","Spark.Core.Manager.SessionManager"],"subclasses":[],"implements":["Spark.Core.Manager.ISessionManager"],"members":[{"id":"constructor-SessionManager1","name":"SessionManager","owner":"Spark.Core.Manager.SessionManager","tagname":"constructor","comment":"","meta":{}},{"id":"property-CurrentClientContext","name":"CurrentClientContext","owner":"Spark.Core.Manager.SessionManager","tagname":"property","datatype":"Ccs.Common.IClientContext","comment":"\u003ch3\u003eModifier:\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eGET - PRIVATE SET\u003c/code\u003e\u003c/p\u003e\n","meta":{}},{"id":"method-initialize","name":"initialize","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"","returns":{"comment":""},"meta":{"override":true}},{"id":"method-dispose","name":"dispose","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"","returns":{"comment":""},"meta":{"override":true}},{"id":"method-loadConfig","name":"loadConfig","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"","returns":{"comment":""},"meta":{"protected":true}},{"id":"method-endRequestEnvironment","name":"endRequestEnvironment","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eEnds a user\u0027s session (not a log out, but the opposite of establishRequestEnvironment).\u003c/p\u003e\n","returns":{"comment":""},"meta":{}},{"id":"method-resetSession","name":"resetSession","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eReset the state of the current session to it\u0027s initial \u0027empty\u0027 state.\u003c/p\u003e\n","returns":{"comment":""},"meta":{"private":true}},{"id":"method-databasesConnected","name":"databasesConnected","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eChecks that all available databases are connected\u003c/p\u003e\n","returns":{"datatype":"LOGICAL","comment":""},"meta":{}},{"id":"method-establishRequestEnvironment","name":"establishRequestEnvironment","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eValidates that the Client Principal passed in is valid and establishes a new Spark session\u003c/p\u003e\n","parameters":[{"name":"phClientPrincipal","datatype":"HANDLE","mode":"INPUT"}],"returns":{"comment":""},"meta":{}},{"id":"method-establishRequestEnvironment-1","name":"establishRequestEnvironment","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"","parameters":[{"name":"pcSessionID","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"comment":""},"meta":{}},{"id":"method-establishRequestEnvironment-2","name":"establishRequestEnvironment","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eValidates that the Client Principal on the session handle is valid and establishes a new Spark session\u003c/p\u003e\n","returns":{"comment":""},"meta":{}},{"id":"method-assertUserCredentials","name":"assertUserCredentials","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eThis method will authenticate the user credentials and seal the CPO if it\u0027s a new user login.\nIf this is re-establishing a user session or the CPO has been created externally (e.g. by PASOE Spring authentication)\nthen this method will check that the user CPO is a valid object\nthat has not expired etc. and will assert the user against all connected databases\u003c/p\u003e\n","parameters":[{"name":"phClientPrincipal","datatype":"HANDLE","mode":"INPUT","comment":"The users Client Principal Object"}],"returns":{"comment":""},"meta":{"protected":true}},{"id":"method-getDatabaseOptions","name":"getDatabaseOptions","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eObtain options in use for available databases\u003c/p\u003e\n","returns":{"comment":""},"meta":{"protected":true}},{"id":"method-registerDomains","name":"registerDomains","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eLoad the security domains from the connected databases\u003c/p\u003e\n","returns":{"comment":""},"meta":{"protected":true}},{"id":"method-userLogin","name":"userLogin","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eLog a user in\u003c/p\u003e\n","parameters":[{"name":"pcUserID","datatype":"CHARACTER","mode":"INPUT","comment":"The User ID"},{"name":"pcDomain","datatype":"CHARACTER","mode":"INPUT","comment":"The user domain"},{"name":"pcPassword","datatype":"CHARACTER","mode":"INPUT","comment":"The user password"},{"name":"pcExtra","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"RAW","comment":"A raw Client Principal object"},"meta":{}},{"id":"method-decryptPassword","name":"decryptPassword","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eAn overide point to allow for a password to be passed as an encrypted value and be decrypted here\u003c/p\u003e\n","parameters":[{"name":"pcPassword","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":""},"meta":{"protected":true}},{"id":"method-setClientPrincipalAttributes","name":"setClientPrincipalAttributes","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eUsed to assign any attributes and user properties to the client principal before it is sealed.\u003c/p\u003e\n","parameters":[{"name":"phClientPrincipal","datatype":"HANDLE","mode":"INPUT"}],"returns":{"comment":""},"meta":{"protected":true}},{"id":"method-invalidateContext","name":"invalidateContext","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eInvalidate a UserContext object\u003c/p\u003e\n","returns":{"comment":""},"meta":{}},{"id":"method-invalidateContext-1","name":"invalidateContext","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eInvalidate a UserContext object\u003c/p\u003e\n","parameters":[{"name":"pcContextId","datatype":"CHARACTER","mode":"INPUT","comment":"The ContextID to invalidate"}],"returns":{"comment":""},"meta":{}},{"id":"method-invalidateContext-2","name":"invalidateContext","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eInvalidate a UserContext object\u003c/p\u003e\n","parameters":[{"name":"phClientPrincipal","datatype":"HANDLE","mode":"INPUT","comment":"The session CPO to invalidate"}],"returns":{"comment":""},"meta":{}},{"id":"method-setSessionAttribute","name":"setSessionAttribute","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eSet the runtime session attributes\nAttributes: date-format, timezone, numeric-separator, numeric-decimal-point\u003c/p\u003e\n","parameters":[{"name":"oAttribute","datatype":"Spark.Core.Manager.SessionAttributeEnum","mode":"INPUT"},{"name":"pcValue","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"comment":""},"meta":{}},{"id":"method-resetSessionAttributes","name":"resetSessionAttributes","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eReset the runtime session attributes from the user context\nAttributes: date-format, timezone, numeric-separator, set-numeric-format, numeric-decimal-point\u003c/p\u003e\n","returns":{"comment":""},"meta":{"protected":true}},{"id":"method-getUserSSOToken","name":"getUserSSOToken","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eIf the curent user has a valid CPO then this will return a new sealed CPO with the same properties but with a new expiration date\nThis token can be used by other systems such as a task scheduler perform a task on behalf of the user\u003c/p\u003e\n","parameters":[{"name":"ptExpiration","datatype":"DATETIME-TZ","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":""},"meta":{}},{"id":"method-getUserSSOToken-1","name":"getUserSSOToken","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"\u003cp\u003eIf the passed in token is a valid CPO then this will return a new sealed CPO with the same properties but with a new expiration date\nThis token can be used by other systems such as a task scheduler perform a task on behalf of the user\u003c/p\u003e\n","parameters":[{"name":"pcRawToken","datatype":"CHARACTER","mode":"INPUT"},{"name":"ptExpiration","datatype":"DATETIME-TZ","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":""},"meta":{}},{"id":"method-getDomainAccessCode","name":"getDomainAccessCode","owner":"Spark.Core.Manager.SessionManager","tagname":"method","comment":"","parameters":[{"name":"pcDomainName","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":""},"meta":{"protected":true}},{"id":"temptable-ttConfig","name":"ttConfig","owner":"Spark.Core.Manager.SessionManager","tagname":"temptable","definition":"DEFINE TEMP-TABLE ttConfig NO-UNDO SERIALIZE-NAME \u0027SessionParam\u0027 \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD LoginExpirationTimeOut AS INTEGER INITIAL 0\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ResetClientPrincipal AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;","comment":"","meta":{"private":true,"global":true,"noundo":true}},{"id":"temptable-ttDomains","name":"ttDomains","owner":"Spark.Core.Manager.SessionManager","tagname":"temptable","definition":"DEFINE TEMP-TABLE ttDomains NO-UNDO SERIALIZE-NAME \u0027Domains\u0027 \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD domain AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD accessCode AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD domainDescription AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  INDEX idxDomain PRIMARY UNIQUE domain\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;","comment":"","meta":{"private":true,"global":true,"noundo":true}},{"id":"temptable-ttDatabase","name":"ttDatabase","owner":"Spark.Core.Manager.SessionManager","tagname":"temptable","definition":"DEFINE TEMP-TABLE ttDatabase NO-UNDO \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD DatabaseNum AS INTEGER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD LogicalName AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ValidDomains AS INTEGER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD DomainAuthority AS LOGICAL\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD UseAppRegistry AS LOGICAL\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  INDEX pkName PRIMARY UNIQUE DatabaseNum\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;","comment":"","meta":{"private":true,"global":true,"noundo":true}},{"id":"dataset-dsConfig","name":"dsConfig","owner":"Spark.Core.Manager.SessionManager","tagname":"dataset","definition":"DEFINE DATASET dsConfig FOR ttConfig, ttDomains\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;","comment":"","meta":{"private":true}},{"id":"constructor-Spark_Core_Manager_Manager_Manager1","name":"Manager","owner":"Spark.Core.Manager.Manager","tagname":"constructor","comment":"","meta":{}},{"id":"constructor-Spark_Core_Service_Service_Service1","name":"Service","owner":"Spark.Core.Service.Service","tagname":"constructor","comment":"","meta":{}},{"id":"method-Spark_Core_Service_Service_initialize","name":"initialize","owner":"Spark.Core.Service.Service","tagname":"method","comment":"\u003cp\u003eInitializer/Startup\u003c/p\u003e\n","returns":{"comment":""},"meta":{"abstract":true}},{"id":"method-Spark_Core_Service_Service_dispose","name":"dispose","owner":"Spark.Core.Service.Service","tagname":"method","comment":"\u003cp\u003eDestroy/Shutdown/Anti-Initializer\u003c/p\u003e\n","returns":{"comment":""},"meta":{"abstract":true}}],"meta":{}});