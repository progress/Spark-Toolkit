Ext.data.JsonP.OpenEdge_BusinessLogic_Filter_JfpFilterParser({"files":[],"uses":["Ccs.BusinessLogic.IGetDataTableRequest","Ccs.BusinessLogic.SortOrderEnum","OpenEdge.BusinessLogic.Filter.AblFilterParser","OpenEdge.BusinessLogic.GetDataTableRequest","OpenEdge.BusinessLogic.QueryDefinition","Progress.Json.ObjectModel.JsonDataType","Progress.Json.ObjectModel.JsonObject"],"id":"class-OpenEdge.BusinessLogic.Filter.JfpFilterParser","tagname":"class","name":"OpenEdge.BusinessLogic.Filter.JfpFilterParser","extends":"OpenEdge.BusinessLogic.Filter.AblFilterParser","author":"pjudge","comment":"\u003ch3\u003eFile:\u003c/h3\u003e\n\u003cp\u003eJfpFilterParser\u003c/p\u003e\n\u003ch3\u003ePurpose:\u003c/h3\u003e\n\u003cp\u003eParse for JSON data in the JSON Filter Pattern\u003c/p\u003e\n\u003ch3\u003eCreated:\u003c/h3\u003e\n\u003cp\u003eWed Dec 07 14:11:10 EST 2016\u003c/p\u003e\n\u003ch3\u003eNotes:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ehttps://documentation.progress.com/output/ua/OpenEdge_latest/index.html#page/dvwsv/updating-business-entities-for-access-by-telerik.html\u003c/li\u003e\n\u003cli\u003eablFilter â€” Contains the text of an ABL WHERE string (not including the WHERE keyword itself) on which to filter the\nOpenEdge BusinessEntity query that returns the result set, as in the following examples:\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e*\u0026quot;ablFilter\u0026quot;:\u003c/h3\u003e\n\u003cp\u003e\u0026quot;(State \u003d \u0027MA\u0027) OR (State \u003d \u0027GA\u0027)\u0026quot;\u003c/p\u003e\n\u003ch3\u003e*\u0026quot;ablFilter\u0026quot;:\u003c/h3\u003e\n\u003cp\u003e\u0026quot;Name BEGINS \u0027A\u0027\u0026quot;\nSaved into TableRequest[n]:QueryDefinition:QuerySelection\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eorderBy - contains an ABL BY sort phrase.\nSaved into TableRequest[n]:QueryDefinition:QuerySort\u003c/li\u003e\n\u003cli\u003etop - a numeric value for the number of records returned.\nSaved into TableRequest[n]:QueryDefinition:NumRecords\u003c/li\u003e\n\u003cli\u003eskip - the number of records to skip\nSaved into TableRequest[n]:QueryDefinition:Skip\u003c/li\u003e\n\u003cli\u003eid - A unique local id. We used it for page context\nSaved into TableRequest[n]:QueryDefinition:PagingContext\u003c/li\u003e\n\u003c/ul\u003e\n","icon":"class","superclasses":["OpenEdge.BusinessLogic.Filter.FilterParser","OpenEdge.BusinessLogic.Filter.AblFilterParser","OpenEdge.BusinessLogic.Filter.JfpFilterParser"],"subclasses":[],"implements":[],"members":[{"id":"constructor-JfpFilterParser1","name":"JfpFilterParser","owner":"OpenEdge.BusinessLogic.Filter.JfpFilterParser","tagname":"constructor","comment":"\u003cp\u003eDefault constructor\u003c/p\u003e\n","meta":{}},{"id":"constructor-JfpFilterParser2","name":"JfpFilterParser","owner":"OpenEdge.BusinessLogic.Filter.JfpFilterParser","tagname":"constructor","comment":"\u003cp\u003eConstructor.\u003c/p\u003e\n","parameters":[{"name":"pTable","datatype":"CHARACTER","mode":"INPUT"}],"meta":{}},{"id":"constructor-JfpFilterParser3","name":"JfpFilterParser","owner":"OpenEdge.BusinessLogic.Filter.JfpFilterParser","tagname":"constructor","comment":"\u003cp\u003eConstructor.\u003c/p\u003e\n","parameters":[{"name":"pTable","datatype":"CHARACTER","mode":"INPUT"}],"meta":{}},{"id":"method-ParseTableRequest","name":"ParseTableRequest","owner":"OpenEdge.BusinessLogic.Filter.JfpFilterParser","tagname":"method","comment":"\u003cp\u003eReads a single table\u0027s request.\u003c/p\u003e\n\u003cp\u003eThis method knows which properties in the input JSON are for the where clause, for the sort-by etc\u003c/p\u003e\n","parameters":[{"name":"pTable","datatype":"CHARACTER","mode":"INPUT"},{"name":"pData","datatype":"Progress.Json.ObjectModel.JsonObject","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IGetDataTableRequest","comment":"IGetDataTableRequest A single table Get Request"},"meta":{"protected":true,"override":true}},{"id":"constructor-OpenEdge_BusinessLogic_Filter_AblFilterParser_AblFilterParser1","name":"AblFilterParser","owner":"OpenEdge.BusinessLogic.Filter.AblFilterParser","tagname":"constructor","comment":"\u003cp\u003eDefault constructor\u003c/p\u003e\n","meta":{}},{"id":"constructor-OpenEdge_BusinessLogic_Filter_AblFilterParser_AblFilterParser2","name":"AblFilterParser","owner":"OpenEdge.BusinessLogic.Filter.AblFilterParser","tagname":"constructor","comment":"\u003cp\u003eConstructor.\u003c/p\u003e\n","parameters":[{"name":"pTable","datatype":"CHARACTER","mode":"INPUT"}],"meta":{}},{"id":"constructor-OpenEdge_BusinessLogic_Filter_AblFilterParser_AblFilterParser3","name":"AblFilterParser","owner":"OpenEdge.BusinessLogic.Filter.AblFilterParser","tagname":"constructor","comment":"\u003cp\u003eConstructor.\u003c/p\u003e\n","parameters":[{"name":"pTable","datatype":"CHARACTER","mode":"INPUT"}],"meta":{}},{"id":"method-OpenEdge_BusinessLogic_Filter_AblFilterParser_ParseSortString","name":"ParseSortString","owner":"OpenEdge.BusinessLogic.Filter.AblFilterParser","tagname":"method","comment":"\u003cp\u003eParses an ABL BY expression into an array of IQuerySortEntry.\u003c/p\u003e\n\u003cp\u003eIf the string is malformed (ie can\u0027t be used as an ABL sort), then an indeterminate array\nis returned. mallformed might be something like \u0026quot;by eq 21\u0026quot; or \u0026quot;by\u0026quot;.\u003c/p\u003e\n","parameters":[{"name":"pSortBy","datatype":"LONGCHAR","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IQuerySortEntry","comment":"IQuerySortEntry[] An array of sort entries. Will be indeterminate if the input value is empty or null,\n or if the string isn\u0027t of the format \"BY \u003cfield\u003e [BY \u003cfield-2\u003e]\""},"meta":{"protected":true}},{"id":"method-OpenEdge_BusinessLogic_Filter_AblFilterParser_ParseWhereString","name":"ParseWhereString","owner":"OpenEdge.BusinessLogic.Filter.AblFilterParser","tagname":"method","comment":"\u003cp\u003eParses a where string into a query entry - either a group or a predicate.\u003c/p\u003e\n\u003cp\u003eIf the parsing runs into problems (eg a malformed string) a null IQueryEntry is returned.\nSplitting of a string into groups using \u0026quot;(\u003cgrp-1\u003e)\u0026quot; is not supported.\u003c/p\u003e\n","parameters":[{"name":"pWhere","datatype":"LONGCHAR","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IQueryEntry","comment":"IQueryEntry A query group, query predicate or unknown (if the string cannot be parsed)"},"meta":{"protected":true}},{"id":"method-OpenEdge_BusinessLogic_Filter_AblFilterParser_ParseSortBy","name":"ParseSortBy","owner":"OpenEdge.BusinessLogic.Filter.AblFilterParser","tagname":"method","comment":"\u003cp\u003eParses an SORT-BY phrase and returns an array of IQuerySortEntry objects.\u003c/p\u003e\n","parameters":[{"name":"pSortBy","datatype":"Progress.Lang.Object","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IQuerySortEntry","comment":"IQuerySortEntry[] An array of sort phrases. An indeterminate array is returned if the input phrase is empty"},"meta":{"override":true}},{"id":"method-OpenEdge_BusinessLogic_Filter_AblFilterParser_ParseWhere","name":"ParseWhere","owner":"OpenEdge.BusinessLogic.Filter.AblFilterParser","tagname":"method","comment":"\u003cp\u003eParses where/filter phrase and returns an IQueryEntry object for a single table\u003c/p\u003e\n","parameters":[{"name":"pWhere","datatype":"Progress.Lang.Object","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IQueryEntry","comment":"IQueryEntry The query entry.We return one of an IQueryPredicate (single clause)\n or an IQueryGroup (many clauses)"},"meta":{"override":true}},{"id":"method-OpenEdge_BusinessLogic_Filter_AblFilterParser_Parse","name":"Parse","owner":"OpenEdge.BusinessLogic.Filter.AblFilterParser","tagname":"method","comment":"\u003cp\u003eReads and processes (parses) the filter.\u003c/p\u003e\n","parameters":[{"name":"pData","datatype":"Progress.Lang.Object","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IGetDataRequest","comment":""},"meta":{"override":true}},{"id":"method-OpenEdge_BusinessLogic_Filter_AblFilterParser_ParseTableRequest","name":"ParseTableRequest","owner":"OpenEdge.BusinessLogic.Filter.AblFilterParser","tagname":"method","comment":"\u003cp\u003eReads a single table\u0027s request\u003c/p\u003e\n\u003cp\u003eThis method knows which properties in the input JSON are for the where clause, for the sort-by etc\u003c/p\u003e\n","parameters":[{"name":"pTable","datatype":"CHARACTER","mode":"INPUT"},{"name":"pData","datatype":"Progress.Json.ObjectModel.JsonObject","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IGetDataTableRequest","comment":"IGetDataTableRequest A single table Get Request"},"meta":{"protected":true}},{"id":"constructor-OpenEdge_BusinessLogic_Filter_FilterParser_FilterParser1","name":"FilterParser","owner":"OpenEdge.BusinessLogic.Filter.FilterParser","tagname":"constructor","comment":"\u003cp\u003eDefault constructor.\u003c/p\u003e\n","meta":{}},{"id":"constructor-OpenEdge_BusinessLogic_Filter_FilterParser_FilterParser2","name":"FilterParser","owner":"OpenEdge.BusinessLogic.Filter.FilterParser","tagname":"constructor","comment":"\u003cp\u003eConstructor.\u003c/p\u003e\n","parameters":[{"name":"pTable","datatype":"CHARACTER","mode":"INPUT"}],"meta":{}},{"id":"constructor-OpenEdge_BusinessLogic_Filter_FilterParser_FilterParser3","name":"FilterParser","owner":"OpenEdge.BusinessLogic.Filter.FilterParser","tagname":"constructor","comment":"\u003cp\u003eConstructor.\u003c/p\u003e\n","parameters":[{"name":"pTable","datatype":"CHARACTER","mode":"INPUT"}],"meta":{}},{"id":"property-OpenEdge_BusinessLogic_Filter_FilterParser_FilterTable","name":"FilterTable","owner":"OpenEdge.BusinessLogic.Filter.FilterParser","tagname":"property","datatype":"CHARACTER","comment":"\u003cp\u003eAn ordered set of table names used to create this filter.\nTypically just one, but potentially more\u003c/p\u003e\n\u003ch3\u003eModifier:\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eGET - PRIVATE SET\u003c/code\u003e\u003c/p\u003e\n","meta":{}},{"id":"method-OpenEdge_BusinessLogic_Filter_FilterParser_Parse","name":"Parse","owner":"OpenEdge.BusinessLogic.Filter.FilterParser","tagname":"method","comment":"\u003cp\u003eReads and processes (parses) a complete data filter.\u003c/p\u003e\n","parameters":[{"name":"pData","datatype":"Progress.Lang.Object","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IGetDataRequest","comment":""},"meta":{"abstract":true}},{"id":"method-OpenEdge_BusinessLogic_Filter_FilterParser_ParseWhere","name":"ParseWhere","owner":"OpenEdge.BusinessLogic.Filter.FilterParser","tagname":"method","comment":"\u003cp\u003eParses where/filter phrase and returns an IQueryEntry object for a single table\u003c/p\u003e\n","parameters":[{"name":"pWhere","datatype":"Progress.Lang.Object","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IQueryEntry","comment":"IQueryEntry The query entry.We return one of an IQueryPredicate (single clause) \n or an IQueryGroup (many clauses)"},"meta":{"abstract":true}},{"id":"method-OpenEdge_BusinessLogic_Filter_FilterParser_ParseSortBy","name":"ParseSortBy","owner":"OpenEdge.BusinessLogic.Filter.FilterParser","tagname":"method","comment":"\u003cp\u003eParses an SORT-BY phrase and returns an array of IQuerySortEntry objects.\u003c/p\u003e\n","parameters":[{"name":"pSortBy","datatype":"Progress.Lang.Object","mode":"INPUT"}],"returns":{"datatype":"Ccs.BusinessLogic.IQuerySortEntry","comment":"IQuerySortEntry[] An array of sort phrases. An indeterminate array is returned if the input phrase is empty"},"meta":{"abstract":true}}],"meta":{}});