Ext.data.JsonP.OpenEdge_BusinessLogic_Query_QueryBuilder({"files":[],"uses":["Ccs.BusinessLogic.IGetDataRequest","Ccs.BusinessLogic.IGetDataTableRequest","Ccs.BusinessLogic.IQueryGroup","Ccs.BusinessLogic.IQueryPredicate","Ccs.BusinessLogic.JoinEnum","Ccs.BusinessLogic.QueryOperatorEnum","Ccs.BusinessLogic.SortOrderEnum","Ccs.Common.Support.ICharacterArrayHolder","Ccs.Common.Support.ICharacterHolder","Ccs.Common.Support.IDateArrayHolder","Ccs.Common.Support.IDateHolder","Ccs.Common.Support.IDateTimeArrayHolder","Ccs.Common.Support.IDateTimeHolder","Ccs.Common.Support.IDateTimeTzArrayHolder","Ccs.Common.Support.IDateTimeTzHolder","Ccs.Common.Support.IDecimalArrayHolder","Ccs.Common.Support.IDecimalHolder","Ccs.Common.Support.IInt64ArrayHolder","Ccs.Common.Support.IInt64Holder","Ccs.Common.Support.IIntegerArrayHolder","Ccs.Common.Support.IIntegerHolder","Ccs.Common.Support.ILogicalArrayHolder","Ccs.Common.Support.ILogicalHolder","Ccs.Common.Support.ILongcharArrayHolder","Ccs.Common.Support.ILongcharHolder","Ccs.Common.Support.IRowidHolder","OpenEdge.Core.Assert","OpenEdge.Core.DataTypeEnum","OpenEdge.Core.StringConstant","OpenEdge.Core.TimeStamp","Ccs.Common.Support.IPrimitiveHolder"],"id":"class-OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"class","name":"OpenEdge.BusinessLogic.Query.QueryBuilder","extends":"","author":"pjudge \u0026 dugrau","comment":"\u003ch3\u003eFile:\u003c/h3\u003e\n\u003cp\u003eQueryBuilder\u003c/p\u003e\n\u003ch3\u003eCreated:\u003c/h3\u003e\n\u003cp\u003eThu May 10 12:38:00 EDT 2018\u003c/p\u003e\n\u003ch3\u003eNotes:\u003c/h3\u003e\n\u003cp\u003eADAS-101\u003c/p\u003e\n","icon":"class","superclasses":["OpenEdge.BusinessLogic.Query.QueryBuilder"],"subclasses":[],"implements":[],"members":[{"id":"method-GetTableBuffer","name":"GetTableBuffer","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eReturns a table/buffer handle for a given name from an input schema\u003c/p\u003e\n","parameters":[{"name":"phSchema","datatype":"HANDLE","mode":"INPUT"},{"name":"pcTableName","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"HANDLE","comment":"handle A buffer handle for the given name."},"meta":{"protected":true}},{"id":"method-GetFieldBuffer","name":"GetFieldBuffer","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eReturns a fiueld handle for a given name from an input buffer\u003c/p\u003e\n","parameters":[{"name":"phTable","datatype":"HANDLE","mode":"INPUT"},{"name":"pcFieldName","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"HANDLE","comment":"handle A buffer field handle for the given name."},"meta":{"protected":true}},{"id":"method-MapOperator","name":"MapOperator","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eMaps a query operator into a string template\u003c/p\u003e\n","parameters":[{"name":"poOperator","datatype":"Ccs.BusinessLogic.QueryOperatorEnum","mode":"INPUT"},{"name":"pcDataType","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":"character A templated operator map of the form \"\u00261 eq \u00262\""},"meta":{"protected":true}},{"id":"method-MapJoin","name":"MapJoin","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eCreates a templated join phrase for a clause\u003c/p\u003e\n","parameters":[{"name":"pcQuery","datatype":"CHARACTER","mode":"INPUT"},{"name":"pcClause","datatype":"CHARACTER","mode":"INPUT"},{"name":"poJoinAs","datatype":"Ccs.BusinessLogic.JoinEnum","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":"character A new query string, including the join phrase"},"meta":{"protected":true}},{"id":"method-BuildGroup","name":"BuildGroup","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eBuilds a query group string from a group\u003c/p\u003e\n","parameters":[{"name":"phTable","datatype":"HANDLE","mode":"INPUT"},{"name":"poGroup","datatype":"Ccs.BusinessLogic.IQueryGroup","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":"character A group string"},"meta":{"protected":true}},{"id":"method-BuildClause","name":"BuildClause","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eBuilds a WHERE clause for a table from a QueryPredicate\u003c/p\u003e\n","parameters":[{"name":"phTable","datatype":"HANDLE","mode":"INPUT"},{"name":"poClause","datatype":"Ccs.BusinessLogic.IQueryPredicate","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":"character A string representation of the where clause"},"meta":{"protected":true}},{"id":"method-BuildQuery","name":"BuildQuery","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eBuilds a query handle (object) from a IGetDataRequest object. This method maps\nthe input names to the input handle\u0027s SERIALIZE-NAMEs and uses the \u0027real\u0027\nnames to build the where clause\u003c/p\u003e\n","parameters":[{"name":"pFilter","datatype":"Ccs.BusinessLogic.IGetDataRequest","mode":"INPUT"},{"name":"pSchema","datatype":"HANDLE","mode":"INPUT"}],"returns":{"datatype":"HANDLE","comment":"handle A valid QUERY handle"},"meta":{}},{"id":"method-BuildQueryString","name":"BuildQueryString","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eBuilds a query string from a IGetDataRequest object. This method does\nno name conversions - just takes the names from the input object.\u003c/p\u003e\n","parameters":[{"name":"pFilter","datatype":"Ccs.BusinessLogic.IGetDataRequest","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":"character A complete WHERE clause , with no name conversions"},"meta":{}},{"id":"method-BuildQueryString-1","name":"BuildQueryString","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eBuilds a query string for a single table from a IGetDataTableRequest object.\u003c/p\u003e\n\u003cp\u003eThis method maps the input names to the input handle\u0027s SERIALIZE-NAMEs and\nuses the \u0027real\u0027 names to build the where clause\u003c/p\u003e\n","parameters":[{"name":"pFilter","datatype":"Ccs.BusinessLogic.IGetDataTableRequest","mode":"INPUT"},{"name":"pInclFilter","datatype":"LOGICAL","mode":"INPUT"},{"name":"pInclSort","datatype":"LOGICAL","mode":"INPUT"},{"name":"pSchema","datatype":"HANDLE","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":"character A complete WHERE clause"},"meta":{}},{"id":"method-BuildQueryStrings","name":"BuildQueryStrings","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eBuilds an array of query strings from a IGetDataRequest object. This method maps\nthe input names to the input dataset\u0027s SERIALIZE-NAMEs and uses the \u0027real\u0027\nnames to build the where clauses. The output array matches the order of the buffers\nin the dataset, which may differ from the order of the tablerequest array.\u003c/p\u003e\n","parameters":[{"name":"pFilter","datatype":"Ccs.BusinessLogic.IGetDataRequest","mode":"INPUT"},{"name":"pSchema","datatype":"HANDLE","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":"character[] An array of WHERE clauses, matching the number of table requests"},"meta":{}},{"id":"method-BuildQueryString-2","name":"BuildQueryString","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eBuilds a query string from a IGetDataRequest object. This method maps\nthe input names to the input handle\u0027s SERIALIZE-NAMEs and uses the \u0027real\u0027\nnames to build the where clause\u003c/p\u003e\n","parameters":[{"name":"pFilter","datatype":"Ccs.BusinessLogic.IGetDataRequest","mode":"INPUT"},{"name":"pSchema","datatype":"HANDLE","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":"character A complete WHERE clause"},"meta":{}},{"id":"method-MergeQueryStrings","name":"MergeQueryStrings","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eMerges 2 query strings with specified join. The resulting query string has the format\n\u0026quot;WHERE ( \u003cstring-1\u003e ) \u003cjoin\u003e ( \u003cstring-2\u003e ) BY \u003cby-1\u003e BY \u003cby-2\u003e \u0026quot;\nor\n\u0026quot;WHERE TRUE BY \u003cby-1\u003e BY \u003cby-2\u003e\u0026quot;\nif only BY clauses are passed in.\u003c/p\u003e\n\u003cp\u003eEach input string is put in parentheses, except when\ni)   the input strings are both ?\nii)  one or both of the input strings is empty\niii) there are no where clauses\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eJoin values\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eif the join is null, use JoinEnum:And\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eif the join is NONE, use JoinEnum:And\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eif the join is NOT, use JoinEnum:AndNot\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFor other values, use as specified\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eif both strings are null, then shortcut and return\n? and ?     \u003d where true\n? or ?      \u003d where true\n? and not ? \u003d where false\n? or not ?  \u003d where true\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNo validation (of field/table names) is done; this is a simple string merge routine.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf either string is empty, no join is performed, and the other string\nis returned (even if empty)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf either query string containd BY clause(s), these are appended\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n","parameters":[{"name":"pQueryString1","datatype":"CHARACTER","mode":"INPUT"},{"name":"pJoin","datatype":"Ccs.BusinessLogic.JoinEnum","mode":"INPUT"},{"name":"pQueryString2","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":"character The merged query string"},"meta":{}},{"id":"method-ParseIsoDate","name":"ParseIsoDate","owner":"OpenEdge.BusinessLogic.Query.QueryBuilder","tagname":"method","comment":"\u003cp\u003eConverts a string (ISO, hopefully) into a datetime-tz.\nThis method does not thrown any errors, and will return the UNKNOWN value\nif the input value cannot be converted into a datetime-tz.\u003c/p\u003e\n","parameters":[{"name":"pIso","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"DATETIME-TZ","comment":""},"meta":{"protected":true}}],"meta":{}});