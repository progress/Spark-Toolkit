Ext.data.JsonP.Spark_Core_Message_AbstractMessage({"files":[],"uses":["Progress.Json.ObjectModel.JsonArray","Progress.Json.ObjectModel.JsonDataType","Progress.Json.ObjectModel.JsonObject","Progress.Json.ObjectModel.ObjectModelParser","Progress.Lang.AppError","Spark.Core.Message.IAbstractMessage","Spark.Core.Util.ApplicationError","Spark.Core.Util.FormatTools"],"id":"class-Spark.Core.Message.AbstractMessage","tagname":"class","name":"Spark.Core.Message.AbstractMessage","extends":"","author":"","comment":"\u003cp\u003eAn abstract message class used to pass request and response messages in and out of a service request\u003c/p\u003e\n","icon":"class","superclasses":["Spark.Core.Message.AbstractMessage"],"subclasses":["Spark.Core.Message.ContextMessage","Spark.Core.Message.ConfigMessage"],"implements":["Spark.Core.Message.IAbstractMessage"],"members":[{"id":"constructor-AbstractMessage1","name":"AbstractMessage","owner":"Spark.Core.Message.AbstractMessage","tagname":"constructor","comment":"","meta":{}},{"id":"constructor-AbstractMessage2","name":"AbstractMessage","owner":"Spark.Core.Message.AbstractMessage","tagname":"constructor","comment":"\u003cp\u003eUsed when recreating the Service Message from the serialized JSON string\u003c/p\u003e\n","parameters":[{"name":"pcMessage","datatype":"LONGCHAR","mode":"INPUT","comment":"The serialized JSON string of this Service Message"}],"meta":{}},{"id":"destructor-AbstractMessage","name":"AbstractMessage","owner":"Spark.Core.Message.AbstractMessage","tagname":"destructor","comment":"\u003cp\u003eShould explicitly delete the message params when finished.\u003c/p\u003e\n","meta":{}},{"id":"property-messageKeyPin","name":"messageKeyPin","owner":"Spark.Core.Message.AbstractMessage","tagname":"property","datatype":"CHARACTER","comment":"","meta":{}},{"id":"method-deserializeMessage","name":"deserializeMessage","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcMessage","datatype":"LONGCHAR","mode":"INPUT"}],"returns":{"comment":""},"meta":{"protected":true}},{"id":"method-deserializeMessageFromFile","name":"deserializeMessageFromFile","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcFile","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"comment":""},"meta":{"protected":true}},{"id":"method-promoteObject","name":"promoteObject","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-demoteObject","name":"demoteObject","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setNullParam","name":"setNullParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"pcValue","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-1","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"pcValue","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-2","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"pcValue","datatype":"LONGCHAR","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-3","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"pcValue","datatype":"LONGCHAR","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-4","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"piValue","datatype":"INTEGER","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-5","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"piValue","datatype":"INTEGER","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-6","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"piValue","datatype":"INT64","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-7","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"piValue","datatype":"INT64","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-8","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"plValue","datatype":"LOGICAL","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-9","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"plValue","datatype":"LOGICAL","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-10","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"pdValue","datatype":"DECIMAL","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-11","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"pdValue","datatype":"DECIMAL","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-12","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"ptValue","datatype":"DATE","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-13","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"ptValue","datatype":"DATE","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-14","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"ptValue","datatype":"DATETIME","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-15","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"ptValue","datatype":"DATETIME","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-16","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"ptValue","datatype":"DATETIME-TZ","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-17","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"ptValue","datatype":"DATETIME-TZ","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-18","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"prValue","datatype":"ROWID","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-19","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"prValue","datatype":"ROWID","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-20","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"prValue","datatype":"RECID","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-21","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"prValue","datatype":"RECID","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-22","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"pmValue","datatype":"MEMPTR","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-23","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"pmValue","datatype":"MEMPTR","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-24","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"poValue","datatype":"Progress.Json.ObjectModel.JsonObject","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-25","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"poValue","datatype":"Progress.Json.ObjectModel.JsonArray","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-26","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"phValue","datatype":"HANDLE","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-setParam-27","name":"setParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"phValue","datatype":"HANDLE","mode":"INPUT"},{"name":"plUseBeforeImage","datatype":"LOGICAL","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-getParams","name":"getParams","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eReturns an extent of parameters on the request object.\u003c/p\u003e\n","returns":{"datatype":"CHARACTER","comment":""},"meta":{}},{"id":"method-getParamCount","name":"getParamCount","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eReturns a count of parameters on the request object.\u003c/p\u003e\n","returns":{"datatype":"INTEGER","comment":""},"meta":{}},{"id":"method-hasParam","name":"hasParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eReturns a logical indicating if this message object contains the named parameter.\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the param"}],"returns":{"datatype":"LOGICAL","comment":""},"meta":{"final":true}},{"id":"method-removeParam","name":"removeParam","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003e@param pcParam The name of the param to be removed\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"comment":""},"meta":{"final":true}},{"id":"method-getParamObject","name":"getParamObject","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003e@return The Message object\u003c/p\u003e\n","returns":{"datatype":"Progress.Json.ObjectModel.JsonObject","comment":""},"meta":{}},{"id":"method-getParamType","name":"getParamType","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGets JSON data type for the named property.\nThe returned integer corresponds to the static integer properties defined in the Progress.Json.ObjectModel.JsonDataType class.\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"INTEGER","comment":"The Parameter type"},"meta":{}},{"id":"method-getParamAsJsonText","name":"getParamAsJsonText","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as plain JSON text\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"LONGCHAR","comment":"The Parameter value as JSON text"},"meta":{}},{"id":"method-getParamAsJsonText-1","name":"getParamAsJsonText","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as plain JSON text\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"LONGCHAR","comment":"The Parameter value as JSON text or undefined in not found"},"meta":{}},{"id":"method-getParamAsChar","name":"getParamAsChar","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a character string\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"CHARACTER","comment":"The Parameter value as a character string"},"meta":{}},{"id":"method-getParamAsChar-1","name":"getParamAsChar","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a character string\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"CHARACTER","comment":"The Parameter value as a character string or undefined in not found"},"meta":{}},{"id":"method-getParamAsCharEx","name":"getParamAsCharEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a character extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"CHARACTER","comment":"The Parameter value as a character extent"},"meta":{}},{"id":"method-getParamAsCharEx-1","name":"getParamAsCharEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a character extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exist"}],"returns":{"datatype":"CHARACTER","comment":"The Parameter value as a character extent"},"meta":{}},{"id":"method-getParamAsLongChar","name":"getParamAsLongChar","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a longchar string\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"LONGCHAR","comment":"The Parameter value as a longchar string"},"meta":{}},{"id":"method-getParamAsLongChar-1","name":"getParamAsLongChar","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a longchar string\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"LONGCHAR","comment":"The Parameter value as a longchar string or undefined in not found"},"meta":{}},{"id":"method-getParamAsLongCharEx","name":"getParamAsLongCharEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a longchar extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"LONGCHAR","comment":"The Parameter value as a longchar extent"},"meta":{}},{"id":"method-getParamAsLongCharEx-1","name":"getParamAsLongCharEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a longchar extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"LONGCHAR","comment":"The Parameter value as a longchar extent"},"meta":{}},{"id":"method-getParamAsInt","name":"getParamAsInt","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a integer\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"INTEGER","comment":"The Parameter value as an integer"},"meta":{}},{"id":"method-getParamAsInt-1","name":"getParamAsInt","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a integer\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"INTEGER","comment":"The Parameter value as an integer or undefined in not found"},"meta":{}},{"id":"method-getParamAsIntEx","name":"getParamAsIntEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a integer extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"INTEGER","comment":"The Parameter value as a integer extent"},"meta":{}},{"id":"method-getParamAsIntEx-1","name":"getParamAsIntEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a integer extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"INTEGER","comment":"The Parameter value as a integer extent"},"meta":{}},{"id":"method-getParamAsInt64","name":"getParamAsInt64","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a int64\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"INT64","comment":"The Parameter value as an int64"},"meta":{}},{"id":"method-getParamAsInt64-1","name":"getParamAsInt64","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a int64\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"INT64","comment":"The Parameter value as an int64 or undefined in not found"},"meta":{}},{"id":"method-getParamAsInt64Ex","name":"getParamAsInt64Ex","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a int64 extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"INT64","comment":"The Parameter value as a int64 extent"},"meta":{}},{"id":"method-getParamAsInt64Ex-1","name":"getParamAsInt64Ex","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a int64 extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"INT64","comment":"The Parameter value as a int64 extent"},"meta":{}},{"id":"method-getParamAsDec","name":"getParamAsDec","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a decimal\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"DECIMAL","comment":"The Parameter value as an decimal"},"meta":{}},{"id":"method-getParamAsDec-1","name":"getParamAsDec","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a decimal\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"DECIMAL","comment":"The Parameter value as an decimal or undefined in not found"},"meta":{}},{"id":"method-getParamAsDecEx","name":"getParamAsDecEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a decimal extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"DECIMAL","comment":"The Parameter value as a decimal extent"},"meta":{}},{"id":"method-getParamAsDecEx-1","name":"getParamAsDecEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a decimal extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"DECIMAL","comment":"The Parameter value as a decimal extent"},"meta":{}},{"id":"method-getParamAsDate","name":"getParamAsDate","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a date\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"DATE","comment":"The Parameter value as an date"},"meta":{}},{"id":"method-getParamAsDate-1","name":"getParamAsDate","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a date\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"DATE","comment":"The Parameter value as an date or undefined in not found"},"meta":{}},{"id":"method-getParamAsDateEx","name":"getParamAsDateEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a date extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"DATE","comment":"The Parameter value as a date extent"},"meta":{}},{"id":"method-getParamAsDateEx-1","name":"getParamAsDateEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a date extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"DATE","comment":"The Parameter value as a date extent"},"meta":{}},{"id":"method-getParamAsDatetime","name":"getParamAsDatetime","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a datetime\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"DATETIME","comment":"The Parameter value as an datetime"},"meta":{}},{"id":"method-getParamAsDatetime-1","name":"getParamAsDatetime","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a datetime\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"DATETIME","comment":"The Parameter value as an datetime or undefined in not found"},"meta":{}},{"id":"method-getParamAsDatetimeEx","name":"getParamAsDatetimeEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a datetime extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"DATETIME","comment":"The Parameter value as a datetime extent"},"meta":{}},{"id":"method-getParamAsDatetimeEx-1","name":"getParamAsDatetimeEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a datetime extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"DATETIME","comment":"The Parameter value as a datetime extent"},"meta":{}},{"id":"method-getParamAsDatetimeTZ","name":"getParamAsDatetimeTZ","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a datetime-tz\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"DATETIME-TZ","comment":"The Parameter value as an datetime-tz"},"meta":{}},{"id":"method-getParamAsDatetimeTZ-1","name":"getParamAsDatetimeTZ","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a datetime-tz\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"DATETIME-TZ","comment":"The Parameter value as an datetime-tz or undefined in not found"},"meta":{}},{"id":"method-getParamAsDatetimeTZEx","name":"getParamAsDatetimeTZEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a datetime-tz extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"DATETIME-TZ","comment":"The Parameter value as a datetime-tz extent"},"meta":{}},{"id":"method-getParamAsDatetimeTZEx-1","name":"getParamAsDatetimeTZEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a datetime-tz extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"DATETIME-TZ","comment":"The Parameter value as a datetime-tz extent"},"meta":{}},{"id":"method-getParamAsLog","name":"getParamAsLog","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a logical\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"LOGICAL","comment":"The Parameter value as an logical"},"meta":{}},{"id":"method-getParamAsLog-1","name":"getParamAsLog","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a logical\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"LOGICAL","comment":"The Parameter value as an logical or undefined in not found"},"meta":{}},{"id":"method-getParamAsLogEx","name":"getParamAsLogEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a logical extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"LOGICAL","comment":"The Parameter value as a logical extent"},"meta":{}},{"id":"method-getParamAsLogEx-1","name":"getParamAsLogEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a logical extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"LOGICAL","comment":"The Parameter value as a logical extent"},"meta":{}},{"id":"method-getParamAsRowid","name":"getParamAsRowid","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a rowid\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"ROWID","comment":"The Parameter value as an rowid"},"meta":{}},{"id":"method-getParamAsRowid-1","name":"getParamAsRowid","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a rowid\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"ROWID","comment":"The Parameter value as an rowid or undefined in not found"},"meta":{}},{"id":"method-getParamAsRowidEx","name":"getParamAsRowidEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a rowid extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"ROWID","comment":"The Parameter value as a rowid extent"},"meta":{}},{"id":"method-getParamAsRowidEx-1","name":"getParamAsRowidEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a rowid extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"ROWID","comment":"The Parameter value as a rowid extent"},"meta":{}},{"id":"method-getParamAsRecid","name":"getParamAsRecid","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a recid\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"RECID","comment":"The Parameter value as an recid"},"meta":{}},{"id":"method-getParamAsRecid-1","name":"getParamAsRecid","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a recid\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"RECID","comment":"The Parameter value as an recid or undefined in not found"},"meta":{}},{"id":"method-getParamAsRecidEx","name":"getParamAsRecidEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a recid extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"RECID","comment":"The Parameter value as a recid extent"},"meta":{}},{"id":"method-getParamAsRecidEx-1","name":"getParamAsRecidEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a recid extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"RECID","comment":"The Parameter value as a recid extent"},"meta":{}},{"id":"method-getParamAsMemptr","name":"getParamAsMemptr","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a memptr\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"MEMPTR","comment":"The Parameter value as an memptr"},"meta":{}},{"id":"method-getParamAsMemptr-1","name":"getParamAsMemptr","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a memptr\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"MEMPTR","comment":"The Parameter value as an memptr or undefined in not found"},"meta":{}},{"id":"method-getParamAsMemptrEx","name":"getParamAsMemptrEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a memptr extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"MEMPTR","comment":"The Parameter value as a memptr extent"},"meta":{}},{"id":"method-getParamAsMemptrEx-1","name":"getParamAsMemptrEx","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a memptr extent\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"If true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"MEMPTR","comment":"The Parameter value as a memptr extent"},"meta":{}},{"id":"method-getParamAsJsonObject","name":"getParamAsJsonObject","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a JsonObject\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"Progress.Json.ObjectModel.JsonObject","comment":"The Parameter value as an JsonObject"},"meta":{}},{"id":"method-getParamAsJsonObject-1","name":"getParamAsJsonObject","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a JsonObject\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"Progress.Json.ObjectModel.JsonObject","comment":"The Parameter value as an JsonObject or undefined in not found"},"meta":{}},{"id":"method-getParamAsJsonArray","name":"getParamAsJsonArray","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a JsonArray\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"}],"returns":{"datatype":"Progress.Json.ObjectModel.JsonArray","comment":"The Parameter value as an JsonArray"},"meta":{}},{"id":"method-getParamAsJsonArray-1","name":"getParamAsJsonArray","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a JsonArray\u003c/p\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT","comment":"The name of the Parameter to get"},{"name":"plOptionalParam","datatype":"LOGICAL","mode":"INPUT","comment":"if true then don\u0027t throw an error if the parameter does not exits"}],"returns":{"datatype":"Progress.Json.ObjectModel.JsonArray","comment":"The Parameter value as an JsonArray or undefined in not found"},"meta":{}},{"id":"method-getParamAsHandle","name":"getParamAsHandle","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eGet the Parameter value as a dataset/temp-table\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e@param pcParam The name of the Parameter to get\u003c/li\u003e\n\u003cli\u003e@param pcMode The mode of the dataset/temp-table (ie. Whether to empty first)\u003c/li\u003e\n\u003cli\u003e@param phDataSet The handle of the dataset/temp-table to populate\u003c/li\u003e\n\u003cli\u003e@return The Parameter value as a dataset/temp-table\u003c/li\u003e\n\u003c/ul\u003e\n","parameters":[{"name":"pcParam","datatype":"CHARACTER","mode":"INPUT"},{"name":"pcMode","datatype":"CHARACTER","mode":"INPUT"},{"name":"phData","datatype":"HANDLE","mode":"INPUT"}],"returns":{"comment":""},"meta":{}},{"id":"method-serializeMessage","name":"serializeMessage","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eSerialize the message for passing through the service interface\u003c/p\u003e\n","returns":{"datatype":"LONGCHAR","comment":"A longchar JSON string"},"meta":{}},{"id":"method-storeProperties","name":"storeProperties","owner":"Spark.Core.Message.AbstractMessage","tagname":"method","comment":"\u003cp\u003eThis method must save any local Properties or DataSets using setParam() methods\nso that they can be serialized and de-serialized.\nThis method is called from the serializeMessage method.\nWhist all static members could store and retrieve their values directly via setParam/GetParam methods\na dataset\u0027s or temp-table\u0027s handle can be set at any point durning the service request.  At the end of the service\nrequest, the dataset needs to be serialized and stored in the message object and not before as the data would be changing.\u003c/p\u003e\n","returns":{"comment":""},"meta":{"protected":true,"abstract":true}}],"meta":{"abstract":true}});