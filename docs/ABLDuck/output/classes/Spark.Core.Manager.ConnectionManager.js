Ext.data.JsonP.Spark_Core_Manager_ConnectionManager({"files":[],"uses":["Ccs.ServiceManager.ILifecycleScope","Spark.Core.Manager.ILoggingManager","Spark.Core.Manager.ServiceLifeCycleEnum","Spark.Core.Util.ApplicationError","Spark.Core.Util.OSTools"],"id":"class-Spark.Core.Manager.ConnectionManager","tagname":"class","name":"Spark.Core.Manager.ConnectionManager","extends":"Spark.Core.Manager.Manager","author":"","comment":"\u003cp\u003eConnection Manager\nStarts up and manager all connections to other servers.  e.g. other Progress appservers or extenal web services.\u003c/p\u003e\n","icon":"class","superclasses":["Spark.Core.Service.Service","Spark.Core.Manager.Manager","Spark.Core.Manager.ConnectionManager"],"subclasses":[],"implements":["Spark.Core.Manager.IConnectionManager"],"members":[{"id":"constructor-ConnectionManager1","name":"ConnectionManager","owner":"Spark.Core.Manager.ConnectionManager","tagname":"constructor","comment":"","meta":{}},{"id":"property-oLoggingManager","name":"oLoggingManager","owner":"Spark.Core.Manager.ConnectionManager","tagname":"property","datatype":"Spark.Core.Manager.ILoggingManager","comment":"\u003ch3\u003eModifier:\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ePUBLIC GET - PUBLIC SET\u003c/code\u003e\u003c/p\u003e\n","meta":{}},{"id":"method-initialize","name":"initialize","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"","returns":{"comment":""},"meta":{"override":true}},{"id":"method-dispose","name":"dispose","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"","returns":{"comment":""},"meta":{"override":true}},{"id":"method-loadConfig","name":"loadConfig","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"\u003cp\u003edispose\u003c/p\u003e\n","returns":{"comment":""},"meta":{}},{"id":"method-getConnectionParam","name":"getConnectionParam","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"\u003cp\u003eReturn the Connection Configuration data\u003c/p\u003e\n","parameters":[{"name":"pcConnectName","datatype":"CHARACTER","mode":"","comment":"The Connection Name"},{"name":"pcConnectType","datatype":"CHARACTER","mode":"","comment":"The Connection Type"},{"name":"poLifeCycle","datatype":"Ccs.ServiceManager.ILifecycleScope","mode":""},{"name":"pcConnectParam","datatype":"CHARACTER","mode":"","comment":"The Connection Parameters"}],"returns":{"datatype":"LOGICAL","comment":"TRUE if the Connection Configuration is found else FALSE"},"meta":{}},{"id":"method-getServer","name":"getServer","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"\u003cp\u003eWill return the handle to the requested server.\nIf the server is not connected then this function will create the server and connect it using the parameters supplied in the Config.xml\u003c/p\u003e\n","parameters":[{"name":"pcConnectName","datatype":"CHARACTER","mode":"","comment":"The Name of the Server to connect to as defined in the Config.xml"}],"returns":{"datatype":"HANDLE","comment":"The Handle to the server"},"meta":{}},{"id":"method-stopLifeCycle","name":"stopLifeCycle","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"\u003cp\u003eStops all servers running in a life cycle scope.\u003c/p\u003e\n","parameters":[{"name":"poLifeCycle","datatype":"Ccs.ServiceManager.ILifecycleScope","mode":"","comment":"The Life Cycle scope to stop"}],"returns":{"comment":""},"meta":{}},{"id":"method-stopServer","name":"stopServer","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"\u003cp\u003eStops a running server.\u003c/p\u003e\n","parameters":[{"name":"pcServerName","datatype":"CHARACTER","mode":"","comment":"Server Name of server to stop"}],"returns":{"comment":""},"meta":{}},{"id":"method-reconnectServer","name":"reconnectServer","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"\u003cp\u003eStops and reconnects to a server.\u003c/p\u003e\n","parameters":[{"name":"pcServerName","datatype":"CHARACTER","mode":"","comment":"Server Name of server to reconnect"}],"returns":{"datatype":"HANDLE","comment":""},"meta":{}},{"id":"method-validContext","name":"validContext","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"\u003cp\u003eDetermines if server context has expired.\u003c/p\u003e\n","parameters":[{"name":"pcServerName","datatype":"CHARACTER","mode":"","comment":"Server Name of server to check"}],"returns":{"datatype":"LOGICAL","comment":""},"meta":{}},{"id":"method-getProcHandle","name":"getProcHandle","owner":"Spark.Core.Manager.ConnectionManager","tagname":"method","comment":"\u003cp\u003eGet a singleton procedure handle on a given server.\u003c/p\u003e\n","parameters":[{"name":"pcServerName","datatype":"CHARACTER","mode":"","comment":"Server Name of server to set"},{"name":"pcProcName","datatype":"CHARACTER","mode":""}],"returns":{"datatype":"HANDLE","comment":""},"meta":{}},{"id":"temptable-ttServer","name":"ttServer","owner":"Spark.Core.Manager.ConnectionManager","tagname":"temptable","definition":"DEFINE TEMP-TABLE ttServer \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ServerName AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ServerHandle AS HANDLE\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ServerContext AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ProcedureHandle AS HANDLE\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ConnectionParam AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ConnectionUser AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ConnectionPassword AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ConnectionInfo AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ServerType AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD LifeCycleScope AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  INDEX ix1 PRIMARY UNIQUE ServerName\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  INDEX ix2 LifeCycleScope ServerName\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;","comment":"","meta":{}},{"id":"temptable-ttConnection","name":"ttConnection","owner":"Spark.Core.Manager.ConnectionManager","tagname":"temptable","definition":"DEFINE TEMP-TABLE ttConnection SERIALIZE-NAME \u0027Connection\u0027 \u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ConnectName AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ConnectType AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD ConnectParam AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  FIELD LifeCycle AS CHARACTER\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  INDEX ix1 PRIMARY UNIQUE ConnectName\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;","comment":"","meta":{}},{"id":"dataset-dsConnection","name":"dsConnection","owner":"Spark.Core.Manager.ConnectionManager","tagname":"dataset","definition":"DEFINE DATASET dsConnection FOR ttConnection\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;","comment":"","meta":{}},{"id":"constructor-Spark_Core_Manager_Manager_Manager1","name":"Manager","owner":"Spark.Core.Manager.Manager","tagname":"constructor","comment":"","meta":{}},{"id":"constructor-Spark_Core_Service_Service_Service1","name":"Service","owner":"Spark.Core.Service.Service","tagname":"constructor","comment":"","meta":{}},{"id":"method-Spark_Core_Service_Service_initialize","name":"initialize","owner":"Spark.Core.Service.Service","tagname":"method","comment":"\u003cp\u003eInitializer/Startup\u003c/p\u003e\n","returns":{"comment":""},"meta":{"abstract":true}},{"id":"method-Spark_Core_Service_Service_dispose","name":"dispose","owner":"Spark.Core.Service.Service","tagname":"method","comment":"\u003cp\u003eDestroy/Shutdown/Anti-Initializer\u003c/p\u003e\n","returns":{"comment":""},"meta":{"abstract":true}}],"meta":{}});