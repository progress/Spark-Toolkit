Ext.data.JsonP.OpenEdge_Core_String({"files":[],"uses":["Ccs.Common.Support.ILongcharHolder","OpenEdge.Core.Assert","OpenEdge.Core.Collections.Array","OpenEdge.Core.ISupportEncoding","OpenEdge.Core.StringConstant","Progress.Lang.Object"],"id":"class-OpenEdge.Core.String","tagname":"class","name":"OpenEdge.Core.String","extends":"","author":"pjudge","comment":"\u003chr /\u003e\n\u003ch3\u003eFile:\u003c/h3\u003e\n\u003cp\u003eString\u003c/p\u003e\n\u003ch3\u003ePurpose:\u003c/h3\u003e\n\u003cp\u003ePrimitive class for character/longchar variables\u003c/p\u003e\n\u003ch3\u003eCreated:\u003c/h3\u003e\n\u003cp\u003eTue Aug 11 13:08:46 EDT 2009\u003c/p\u003e\n\u003ch3\u003eNotes:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eNamed \u0027String\u0027 because of keyword/namespace conflicts with\nABL Primitive \u0027character\u0027. There\u0027s no built-in class for this.\u003c/li\u003e\n\u003cli\u003eInitial requirement for collections; having a class for the\nprimitive value means that we don\u0027t have to distinguish between\nprimitives and types, which makes the code more readable.\u003c/li\u003e\n\u003cli\u003eThis class based on the AutoEdge|TheFactory version\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr /\u003e\n","icon":"class","superclasses":["OpenEdge.Core.String"],"subclasses":[],"implements":["ILongcharHolder","ISupportEncoding"],"members":[{"id":"constructor-String1","name":"String","owner":"OpenEdge.Core.String","tagname":"constructor","comment":"\u003cp\u003eDefault constructor\u003c/p\u003e\n","meta":{}},{"id":"constructor-String2","name":"String","owner":"OpenEdge.Core.String","tagname":"constructor","comment":"\u003cp\u003eConstructor\u003c/p\u003e\n","parameters":[{"name":"pcString","datatype":"LONGCHAR","mode":""}],"meta":{}},{"id":"constructor-String3","name":"String","owner":"OpenEdge.Core.String","tagname":"constructor","comment":"\u003cp\u003eConstructor\u003c/p\u003e\n","parameters":[{"name":"pcString","datatype":"CHARACTER","mode":""}],"meta":{}},{"id":"property-Encoding","name":"Encoding","owner":"OpenEdge.Core.String","tagname":"property","datatype":"CHARACTER","comment":"\u003cp\u003eContent encoding (eg utf-8) of this string. Defaults to CPINTERNAL if not specified\u003c/p\u003e\n\u003ch3\u003eModifier:\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ePUBLIC GET - PUBLIC SET\u003c/code\u003e\u003c/p\u003e\n","meta":{}},{"id":"property-Value","name":"Value","owner":"OpenEdge.Core.String","tagname":"property","datatype":"LONGCHAR","comment":"\u003cp\u003eContains the actual string value. Marked as NON-SERIALIZABLE since the actual value is derived,\nand stored in the private mUTF8Value variable\u003c/p\u003e\n\u003ch3\u003eModifier:\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ePUBLIC GET\u003c/code\u003e\u003c/p\u003e\n","meta":{}},{"id":"property-Size","name":"Size","owner":"OpenEdge.Core.String","tagname":"property","datatype":"INT64","comment":"\u003ch3\u003eModifier:\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ePUBLIC GET\u003c/code\u003e\u003c/p\u003e\n","meta":{}},{"id":"method-Trim","name":"Trim","owner":"OpenEdge.Core.String","tagname":"method","comment":"","returns":{"comment":""},"meta":{}},{"id":"method-Trim-1","name":"Trim","owner":"OpenEdge.Core.String","tagname":"method","comment":"","parameters":[{"name":"pCharacter","datatype":"CHARACTER","mode":""}],"returns":{"comment":""},"meta":{}},{"id":"method-Empty","name":"Empty","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cp\u003eReturns a single/the same empty/non-null String object.\u003c/p\u003e\n","returns":{"datatype":"OpenEdge.Core.String","comment":"OpenEdge.Core.String An empty string"},"meta":{"static":true}},{"id":"method-Unknown","name":"Unknown","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cp\u003eReturns a single/the same unknown value String object.\u003c/p\u003e\n","returns":{"datatype":"OpenEdge.Core.String","comment":"OpenEdge.Core.String An empty string"},"meta":{"static":true}},{"id":"method-Equals","name":"Equals","owner":"OpenEdge.Core.String","tagname":"method","comment":"","parameters":[{"name":"p0","datatype":"Progress.Lang.Object","mode":""}],"returns":{"datatype":"LOGICAL","comment":""},"meta":{"override":true}},{"id":"method-Split","name":"Split","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cpre\u003e\u003ccode\u003e   a specified delimiter\n\n   @param character A delimter used to split the string\n\u003c/code\u003e\u003c/pre\u003e\n","parameters":[{"name":"pcDelimiter","datatype":"CHARACTER","mode":""}],"returns":{"datatype":"OpenEdge.Core.Collections.Array","comment":""},"meta":{}},{"id":"method-Split-1","name":"Split","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cpre\u003e\u003ccode\u003e   a default delimiter\n\u003c/code\u003e\u003c/pre\u003e\n","returns":{"datatype":"OpenEdge.Core.Collections.Array","comment":""},"meta":{}},{"id":"method-Split-2","name":"Split","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cpre\u003e\u003ccode\u003e   a default delmiter\n\n   @param OpenEdge.Core.String A value to split\n\u003c/code\u003e\u003c/pre\u003e\n","parameters":[{"name":"poValue","datatype":"OpenEdge.Core.String","mode":""}],"returns":{"datatype":"OpenEdge.Core.Collections.Array","comment":""},"meta":{"static":true}},{"id":"method-Split-3","name":"Split","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cpre\u003e\u003ccode\u003e   a specified delmiter\n\n   If the delimiter does not appear in the string, and the string is not unknown,\n   then the array has an extent of 1 and contains the string.\n\n   @param OpenEdge.Core.String A value to split\n   @param character A delimter used to split the string\n\u003c/code\u003e\u003c/pre\u003e\n","parameters":[{"name":"poValue","datatype":"OpenEdge.Core.String","mode":""},{"name":"pcDelimiter","datatype":"CHARACTER","mode":""}],"returns":{"datatype":"OpenEdge.Core.Collections.Array","comment":""},"meta":{"static":true}},{"id":"method-Split-4","name":"Split","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cpre\u003e\u003ccode\u003e   a default delmiter\n\n   @param longchar A value to split\n\u003c/code\u003e\u003c/pre\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":""}],"returns":{"datatype":"CHARACTER","comment":""},"meta":{"static":true}},{"id":"method-Split-5","name":"Split","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cpre\u003e\u003ccode\u003e   a specified delimiter.\n\n   If the delimiter does not appear in the string, and the string is not unknown,\n   then the array has an extent of 1 and contains the string.\n\n   @param longchar A value to split\n   @param character A delimter used to split the string\n\u003c/code\u003e\u003c/pre\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":""},{"name":"pcDelimiter","datatype":"CHARACTER","mode":""}],"returns":{"datatype":"CHARACTER","comment":""},"meta":{"static":true}},{"id":"method-Join","name":"Join","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cpre\u003e\u003ccode\u003e   @param Array An array object containing of OpenEdge.Core.String objects\n   @param character The delimiter used to join them\n\u003c/code\u003e\u003c/pre\u003e\n","parameters":[{"name":"poValue","datatype":"OpenEdge.Core.Collections.Array","mode":""},{"name":"pcDelimiter","datatype":"CHARACTER","mode":""}],"returns":{"datatype":"OpenEdge.Core.String","comment":""},"meta":{"static":true}},{"id":"method-Join-1","name":"Join","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cpre\u003e\u003ccode\u003e   @param OpenEdge.Core.String[] An array of OpenEdge.Core.String objects to join\n   @param character The delimiter used to join them\n\u003c/code\u003e\u003c/pre\u003e\n","parameters":[{"name":"poValue","datatype":"OpenEdge.Core.String","mode":""},{"name":"pcDelimiter","datatype":"CHARACTER","mode":""}],"returns":{"datatype":"OpenEdge.Core.String","comment":""},"meta":{"static":true}},{"id":"method-Join-2","name":"Join","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cpre\u003e\u003ccode\u003e   @param character[] An array of character values to join\n   @param character The delimiter used to join them\n\u003c/code\u003e\u003c/pre\u003e\n","parameters":[{"name":"pcValue","datatype":"CHARACTER","mode":""},{"name":"pcDelimiter","datatype":"CHARACTER","mode":""}],"returns":{"datatype":"LONGCHAR","comment":""},"meta":{"static":true}},{"id":"method-ToString","name":"ToString","owner":"OpenEdge.Core.String","tagname":"method","comment":"","returns":{"datatype":"CHARACTER","comment":""},"meta":{"override":true}},{"id":"method-Append","name":"Append","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cp\u003eAdds the input string to the end of the current string.\nNo validation (for unknowns in particular) is done on either\nstring value.\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":""}],"returns":{"comment":""},"meta":{}},{"id":"method-Append-1","name":"Append","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cp\u003eAdds the input string to the end of the current string.\nNo validation (for unknowns in particular) is done on either\nstring value.\u003c/p\u003e\n","parameters":[{"name":"poValue","datatype":"OpenEdge.Core.String","mode":""}],"returns":{"comment":""},"meta":{}},{"id":"method-Prepend","name":"Prepend","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cp\u003eAdds the input string to the beginning of the current string.\nNo validation (for unknowns in particular) is done on either\nstring value.\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":""}],"returns":{"comment":""},"meta":{}},{"id":"method-Prepend-1","name":"Prepend","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cp\u003eAdds the input string to the beginning of the current string.\nNo validation (for unknowns in particular) is done on either\nstring value.\u003c/p\u003e\n","parameters":[{"name":"poValue","datatype":"OpenEdge.Core.String","mode":""}],"returns":{"comment":""},"meta":{}},{"id":"method-IsQuoted","name":"IsQuoted","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cp\u003eIndicates whether the string is quoted with either double (\u0026quot;) or single (\u0027) quotes.\nThe first AND last characters must be the same and must either the quote character\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":""}],"returns":{"datatype":"LOGICAL","comment":"logical TRUE if the string is non-null and has matching leading and trailing quotes."},"meta":{"static":true}},{"id":"method-IsQuoted-1","name":"IsQuoted","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cp\u003eIndicates whether the string is quoted with the quote character ,\nThe first AND last characters must be the same and be the quote character\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":""},{"name":"pcQuote","datatype":"CHARACTER","mode":""}],"returns":{"datatype":"LOGICAL","comment":"logical TRUE if the string is non-null and has matching leading and trailing quotes."},"meta":{"static":true}},{"id":"method-IsNullOrEmpty","name":"IsNullOrEmpty","owner":"OpenEdge.Core.String","tagname":"method","comment":"","returns":{"datatype":"LOGICAL","comment":""},"meta":{}},{"id":"method-IsNullOrEmpty-1","name":"IsNullOrEmpty","owner":"OpenEdge.Core.String","tagname":"method","comment":"\u003cp\u003eIndicates whether a string is null or empty: empty having no\nnon-whitespace characters\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":""}],"returns":{"datatype":"LOGICAL","comment":"logical TRUE if the string is null or empty"},"meta":{"static":true}}],"meta":{}});