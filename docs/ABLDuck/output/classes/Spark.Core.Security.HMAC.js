Ext.data.JsonP.Spark_Core_Security_HMAC({"files":[],"uses":["Progress.Lang.*"],"id":"class-Spark.Core.Security.HMAC","tagname":"class","name":"Spark.Core.Security.HMAC","extends":"","author":"James Bowell","comment":"\u003ch3\u003eFile:\u003c/h3\u003e\n\u003cp\u003eSimple HMAC function\u003c/p\u003e\n\u003ch3\u003ePurpose:\u003c/h3\u003e\n\u003cp\u003ePerform a standard HMAC hash of a key and data (as hex)\u003c/p\u003e\n\u003ch3\u003eCreated:\u003c/h3\u003e\n\u003cp\u003e6/13/2011\u003c/p\u003e\n\u003ch3\u003eNotes:\u003c/h3\u003e\n\u003cp\u003eCode obtained from KB000043232 (first via OEHive)\u003c/p\u003e\n\u003ch3\u003ehttp:\u003c/h3\u003e\n\u003cp\u003e//en.wikipedia.org/wiki/HMAC\u003c/p\u003e\n\u003ch3\u003ehttp:\u003c/h3\u003e\n\u003cp\u003e//www.ietf.org/rfc/rfc2104.txt\nHMAC is a hash based MAC algorithm defined in RFC 2104. It can utilize\nany hash function (MD5, SHA1, etc). HMAC also requires a user-supplied\nsecret key, which is a string of bytes of any length (up to 64 bytes).\nThis version will support SHA1 or SHA256 (default: SHA1).\u003c/p\u003e\n","icon":"class","superclasses":["Spark.Core.Security.HMAC"],"subclasses":[],"implements":[],"members":[{"id":"method-GenHash","name":"GenHash","owner":"Spark.Core.Security.HMAC","tagname":"method","comment":"","parameters":[{"name":"pcSHA","datatype":"CHARACTER","mode":"INPUT"},{"name":"pcHexKey","datatype":"CHARACTER","mode":"INPUT"},{"name":"pcHexData","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"CHARACTER","comment":""},"meta":{"static":true}},{"id":"method-TruncateHMAC","name":"TruncateHMAC","owner":"Spark.Core.Security.HMAC","tagname":"method","comment":"\u003cp\u003eGenHash\u003c/p\u003e\n","parameters":[{"name":"pcHexHMAC","datatype":"CHARACTER","mode":"INPUT"}],"returns":{"datatype":"INTEGER","comment":""},"meta":{"static":true}}],"meta":{"final":true}});