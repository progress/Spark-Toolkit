Ext.data.JsonP.Spark_Core_Util_CryptoTools({"files":[],"uses":["Spark.Core.Util.CryptoEncryptAlgorithmEnum","Spark.Core.Util.CryptoPbeHashAlgorithmEnum","Spark.Core.Util.FormatTools"],"id":"class-Spark.Core.Util.CryptoTools","tagname":"class","name":"Spark.Core.Util.CryptoTools","extends":"","author":"","comment":"\u003cp\u003eA static class with cryptology helper methods\u003c/p\u003e\n","icon":"class","superclasses":["Spark.Core.Util.CryptoTools"],"subclasses":[],"implements":[],"members":[{"id":"method-encryptCode","name":"encryptCode","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns a base64 encoded encrypted string of a supplied character string\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":"","comment":"Data to be encrypted"},{"name":"pcPasswordKey","datatype":"CHARACTER","mode":"","comment":"the password used to generate the encryption key"},{"name":"prInitVector","datatype":"RAW","mode":"","comment":"An optional expression that evaluates to an initialization vector value"},{"name":"poCryptoEncryptAlgorithmEnum","datatype":"Spark.Core.Util.CryptoEncryptAlgorithmEnum","mode":"","comment":"the name of the symmetric cryptographic algorithm to use"},{"name":"poCryptoPbeHashAlgorithmEnum","datatype":"Spark.Core.Util.CryptoPbeHashAlgorithmEnum","mode":"","comment":"the name of the pbe hash algorithm to use"}],"returns":{"datatype":"LONGCHAR","comment":""},"meta":{"static":true}},{"id":"method-encryptCode-1","name":"encryptCode","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns the base64 encoded encrypted string of a supplied character string\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":"","comment":"Data to be encrypted"},{"name":"prKey","datatype":"RAW","mode":"","comment":"the encryption key"},{"name":"prInitVector","datatype":"RAW","mode":"","comment":"An optional expression that evaluates to an initialization vector value"},{"name":"poCryptoEncryptAlgorithmEnum","datatype":"Spark.Core.Util.CryptoEncryptAlgorithmEnum","mode":"","comment":"the name of the symmetric cryptographic algorithm to use"}],"returns":{"datatype":"LONGCHAR","comment":""},"meta":{"static":true}},{"id":"method-encryptValue","name":"encryptValue","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns encrypted memptr of a supplied memptr\u003c/p\u003e\n","parameters":[{"name":"pmValue","datatype":"MEMPTR","mode":""},{"name":"prKey","datatype":"RAW","mode":"","comment":"the encryption key"},{"name":"prInitVector","datatype":"RAW","mode":"","comment":"An optional expression that evaluates to an initialization vector value"},{"name":"poCryptoEncryptAlgorithmEnum","datatype":"Spark.Core.Util.CryptoEncryptAlgorithmEnum","mode":"","comment":"the name of the symmetric cryptographic algorithm to use"}],"returns":{"datatype":"MEMPTR","comment":""},"meta":{"static":true}},{"id":"method-decryptCode","name":"decryptCode","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns the decrypted string of a supplied encrypted character string\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":"","comment":"The base64 encoded encrypted data to be decrypted"},{"name":"pcPasswordKey","datatype":"CHARACTER","mode":"","comment":"the password used to generate the encryption key used when the data was encrypted by encryptCode()"},{"name":"prInitVector","datatype":"RAW","mode":"","comment":"An optional expression that evaluates to an initialization vector value"},{"name":"poCryptoEncryptAlgorithmEnum","datatype":"Spark.Core.Util.CryptoEncryptAlgorithmEnum","mode":"","comment":"the name of the symmetric cryptographic algorithm used by encryptCode()"},{"name":"poCryptoPbeHashAlgorithmEnum","datatype":"Spark.Core.Util.CryptoPbeHashAlgorithmEnum","mode":"","comment":"the name of the pbe hash algorithm to use"}],"returns":{"datatype":"LONGCHAR","comment":""},"meta":{"static":true}},{"id":"method-decryptCode-1","name":"decryptCode","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns the decrypted string of a supplied encrypted character string\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":"","comment":"The base64 encoded encrypted data to be decrypted"},{"name":"prKey","datatype":"RAW","mode":"","comment":"the encryption key used when the data was encrypted by encryptCode()"},{"name":"prInitVector","datatype":"RAW","mode":"","comment":"An optional expression that evaluates to an initialization vector value"},{"name":"poCryptoEncryptAlgorithmEnum","datatype":"Spark.Core.Util.CryptoEncryptAlgorithmEnum","mode":"","comment":"the name of the symmetric cryptographic algorithm used by encryptCode()"}],"returns":{"datatype":"LONGCHAR","comment":""},"meta":{"static":true}},{"id":"method-decryptValue","name":"decryptValue","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns decrypted memptr of a supplied encrypted memptr\u003c/p\u003e\n","parameters":[{"name":"pmValue","datatype":"MEMPTR","mode":""},{"name":"prKey","datatype":"RAW","mode":"","comment":"the encryption key used when the data was encrypted by encryptValue()"},{"name":"prInitVector","datatype":"RAW","mode":"","comment":"An optional expression that evaluates to an initialization vector value"},{"name":"poCryptoEncryptAlgorithmEnum","datatype":"Spark.Core.Util.CryptoEncryptAlgorithmEnum","mode":"","comment":"the name of the symmetric cryptographic algorithm to use"}],"returns":{"datatype":"MEMPTR","comment":""},"meta":{"static":true}},{"id":"method-getEncryptKey","name":"getEncryptKey","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns a RAW encryption key that can be passed to encryptCode()\u003c/p\u003e\n","parameters":[{"name":"pcPassword","datatype":"CHARACTER","mode":"","comment":"The password to use in generating the encryption key."},{"name":"poCryptoEncryptAlgorithmEnum","datatype":"Spark.Core.Util.CryptoEncryptAlgorithmEnum","mode":"","comment":"the name of the symmetric cryptographic algorithm that this key will be used with"},{"name":"poCryptoPbeHashAlgorithmEnum","datatype":"Spark.Core.Util.CryptoPbeHashAlgorithmEnum","mode":"","comment":"the name of the pbe hash algorithm to use"}],"returns":{"datatype":"RAW","comment":""},"meta":{"static":true}},{"id":"method-getEncryptKey-1","name":"getEncryptKey","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns a RAW encryption key that can be passed to encryptCode()\u003c/p\u003e\n","parameters":[{"name":"pcPassword","datatype":"CHARACTER","mode":"","comment":"The password to use in generating the encryption key."},{"name":"poCryptoEncryptAlgorithmEnum","datatype":"Spark.Core.Util.CryptoEncryptAlgorithmEnum","mode":"","comment":"the name of the symmetric cryptographic algorithm that this key will be used with"},{"name":"poCryptoPbeHashAlgorithmEnum","datatype":"Spark.Core.Util.CryptoPbeHashAlgorithmEnum","mode":"","comment":"the name of the pbe hash algorithm to use"},{"name":"prSalt","datatype":"RAW","mode":"","comment":"the Raw salt value (Use GENERATE-PBE-SALT to generate a sale value)"}],"returns":{"datatype":"RAW","comment":""},"meta":{"static":true}},{"id":"method-getRandomEncryptKey","name":"getRandomEncryptKey","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns a RAW encryption key that can be passed to encryptCode()\u003c/p\u003e\n","parameters":[{"name":"poCryptoEncryptAlgorithmEnum","datatype":"Spark.Core.Util.CryptoEncryptAlgorithmEnum","mode":"","comment":"the name of the symmetric cryptographic algorithm that this key will be used with"}],"returns":{"datatype":"RAW","comment":""},"meta":{"static":true}},{"id":"method-getEncryptInitVector","name":"getEncryptInitVector","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns RAW initialization vector that can be passed to encryptCode()\u003c/p\u003e\n","parameters":[{"name":"pcInitVector","datatype":"CHARACTER","mode":"","comment":"A string to generate a initialization vector for encryptCode()"}],"returns":{"datatype":"RAW","comment":""},"meta":{"static":true}},{"id":"method-base64Encode","name":"base64Encode","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns a base64 encoded string value of a string value\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":"","comment":"The value to be encoded"}],"returns":{"datatype":"LONGCHAR","comment":""},"meta":{"static":true}},{"id":"method-base64Decode","name":"base64Decode","owner":"Spark.Core.Util.CryptoTools","tagname":"method","comment":"\u003cp\u003eReturns a decoded string value of a base64 encoded string value\u003c/p\u003e\n","parameters":[{"name":"pcValue","datatype":"LONGCHAR","mode":"","comment":"The value to be decoded"}],"returns":{"datatype":"LONGCHAR","comment":""},"meta":{"static":true}}],"meta":{}});